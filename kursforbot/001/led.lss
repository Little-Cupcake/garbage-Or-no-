
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d8  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fa  00000000  00000000  00000333  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000172  00000000  00000000  0000042d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000de  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b5  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
	enum DIRECTION previous_direction = NONE;
	enum DIRECTION current_direction = NONE;
	
	// ustawienie PORTA jako wyjscie
	DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	// ustawienie wartosci 0 na PORTD
	PORTD |= _BV(0);
  70:	90 9a       	sbi	0x12, 0	; 18
  72:	80 e0       	ldi	r24, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  74:	20 e5       	ldi	r18, 0x50	; 80
  76:	33 ec       	ldi	r19, 0xC3	; 195
  78:	51 e0       	ldi	r21, 0x01	; 1
			if ((previous_direction != LEFT) || ((PORTA >> 1) == 0))
			{
				previous_direction = LEFT;
				current_direction = LEFT;
				// ustawienie wartosci 1 dla portu A
				PORTA = 0b10000000;
  7a:	40 e8       	ldi	r20, 0x80	; 128
	PORTD |= _BV(0);
	
	while(1)
	{
		// przycisk wcisniety
		if(!(PIND & _BV(PD0)))
  7c:	80 99       	sbic	0x10, 0	; 16
  7e:	11 c0       	rjmp	.+34     	; 0xa2 <main+0x36>
		{
			if ((previous_direction != LEFT) || ((PORTA >> 1) == 0))
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	19 f4       	brne	.+6      	; 0x8a <main+0x1e>
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	86 95       	lsr	r24
  88:	21 f4       	brne	.+8      	; 0x92 <main+0x26>
			{
				previous_direction = LEFT;
				current_direction = LEFT;
				// ustawienie wartosci 1 dla portu A
				PORTA = 0b10000000;
  8a:	4b bb       	out	0x1b, r20	; 27
  8c:	c9 01       	movw	r24, r18
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
				_delay_ms(DELAY);
			}
			PORTA >>= 1;
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	86 95       	lsr	r24
  96:	8b bb       	out	0x1b, r24	; 27
  98:	c9 01       	movw	r24, r18
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	ed cf       	rjmp	.-38     	; 0x7c <main+0x10>
			_delay_ms(DELAY);
		}
		else
		//if((PIND ^ _BV(PD0)))
		{
			if ((previous_direction != RIGHT) || ((PORTA << 1) > 128))
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	29 f4       	brne	.+10     	; 0xb0 <main+0x44>
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	81 34       	cpi	r24, 0x41	; 65
  ac:	91 05       	cpc	r25, r1
  ae:	24 f0       	brlt	.+8      	; 0xb8 <main+0x4c>
			{
				previous_direction = RIGHT;
				current_direction = RIGHT;
				// ustawienie wartosci 1 dla portu A
				PORTA = 0b00000001;
  b0:	5b bb       	out	0x1b, r21	; 27
  b2:	c9 01       	movw	r24, r18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x48>
				_delay_ms(DELAY);
			}
			PORTA <<= 1;
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	88 0f       	add	r24, r24
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	c9 01       	movw	r24, r18
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	da cf       	rjmp	.-76     	; 0x7c <main+0x10>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
